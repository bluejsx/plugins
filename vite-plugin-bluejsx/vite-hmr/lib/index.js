import{Parser as k}from"acorn";var b=class{constructor(){this.UPDATE_LISTENER_FUNC_NAME="_bjsx_hmr_update";this.PARAM_ALTER_NAME="_blue_insert_params"}transform(t){}getImports(...t){return[]}getExports(...t){return[]}getDependentJSXComponents(t,e){return[]}getFunctions(t){return[]}getVars(t,e){return[]}fromDirectReturnToVarReturn(t){return""}getReturnValue(t){return""}getInsertRecord(){return[]}replaceCode(t,e,r,n,s=!1){let o=0;return n.filter(a=>a[0]<e[0]||s&&a[0]===e[0]).forEach(a=>o+=a[1]),n.push([e[0],t.length-e[1]+e[0]]),r.substring(0,e[0]+o)+t+r.substring(e[1]+o)}insertCode(t,e,r,n,s=!1){return this.replaceCode(t,[e,e],r,n,s)}getCodeFragment(t,e,r){let n=t[0],s=t[1];for(let o=r.length;o--;){let[a,p]=r[o];a<t[1]&&(s+=p,a<t[0]&&(n+=p))}return e.substring(n,s)}};import _ from"path";import T from"fs";var S=class extends b{constructor(){super();this.Parser=k}transform(t,e){t=t.replace(/addEventListener/g,"on").replace(/=>/g,"=> ");let r=this.Parser.parse(t,{ecmaVersion:"latest",sourceType:"module"}),n=t,s=this.getImports(r.body,e),o=this.getExportedFunctions(r.body),a=this.getInsertRecord();return o.forEach(p=>{let{start:u,end:g}=p,h=this.getCodeFragment([u,g],t,a),f=this.getDependentJSXComponents(h,s);t=this.replaceCode(this.processFunctionCode(f,p,h,n),[u,g],t,a)}),t}addHotListenerInfo(t,e,r,n){var o,a;(a=t[o=e.info.src])!=null||(t[o]={varMapCode:"",listenCode:""});let s=t[e.info.src];s.varMapCode+=`${e.info.imports[e.name]}:${e.name},`,s.listenCode+=`${r}.${e.refName}=${r}.${e.refName}.${this.UPDATE_LISTENER_FUNC_NAME}(${e.name});${n}`}processFunctionCode(t,e,r,n){var L,V,w,H;let s=this.getInsertRecord(),o=r,a=e.body,p=a.start-e.start,u=a.end-e.start,g=a.body,h=e.params[0],f="";if(h){let i=h.start-e.start,l=h.end-e.start,E=r.substring(i,l);r=this.replaceCode(this.PARAM_ALTER_NAME,[i,l],r,s),f=`
let ${E}=${this.PARAM_ALTER_NAME};`}let m="self",D=[],$={},c,v=0,d=g==null?void 0:g.find(i=>i.type==="ReturnStatement"),I=a.type==="CallExpression"&&((V=(L=a.callee)==null?void 0:L.object)==null?void 0:V.name)==="Blue";if(d)d.argument.type==="Identifier"&&(m=d.argument.name);else if(!I)return o;let J=d&&d.argument.type==="CallExpression"&&((H=(w=d.argument.callee)==null?void 0:w.object)==null?void 0:H.name)==="Blue",X=I?u:d.start-e.start;[...r.matchAll(/Blue\.r\(/g)].forEach(i=>{var E,y;let l=this.Parser.parseExpressionAt(r,i.index,{ecmaVersion:"latest",sourceType:"module"});l.type==="SequenceExpression"&&(l=l.expressions.find(R=>R.start===l.start)),(l==null?void 0:l.type)==="CallExpression"&&((E=l==null?void 0:l.arguments[1])==null?void 0:E.type)==="ObjectExpression"&&(c!=null||(c=(y=l.arguments[1].properties.find(R=>{var N;return((N=R.key)==null?void 0:N.name)==="ref"}))==null?void 0:y.value.elements[0].name))}),t.forEach(i=>{let l=i.node.arguments[1];if(l.type==="ObjectExpression"){let E=l.properties.find(y=>y.key.name==="ref");if(E){let y="",R=E.value.elements;i.refName=R[1].value,i.hasRef=!0,I||(g.forEach(({type:N,start:x,end:C})=>{let M=x-e.start,B=C-e.start,U=o.substring(M,B);N==="ExpressionStatement"&&o.indexOf(i.refName,M)===M&&(y+=`${c}.${U};`)}),[...o.matchAll(new RegExp(i.refName,"g"))].forEach(N=>{try{let x=this.Parser.parseExpressionAt(o,N.index,{ecmaVersion:"latest",sourceType:"module"});(x.type==="AssignmentExpression"||x.type==="CallExpression")&&(r=this.insertCode(`${c}.`,N.index,r,s))}catch{}})),this.addHotListenerInfo($,i,c,y)}else i.refName=`bjsxc_${v++}`,i.hasRef=!1,D.push(()=>{r=this.insertCode(`ref:[${c},'${i.refName}'],`,l.start+1,r,s),this.addHotListenerInfo($,i,c,"")})}else i.refName=`bjsxc_${v++}`,D.push(()=>{r=this.replaceCode(`{ref:[${c},'${i.refName}']}`,[l.start,l.start+4],r,s),this.addHotListenerInfo($,i,c,"")})}),c||(c="refs",f+=`const ${c}={};`);for(let i=D.length;i--;)D[i]();if(I)f=`{${f}const ${m}=`,r=this.insertCode(`
return ${m};}`,a.end,r,s,!0);else if(J){let i=this.getCodeFragment([d.start-e.start+6,d.end-e.start],r,s);f=`${f}
      const ${m}=${i};`,r=this.replaceCode(`
return ${m};`,[d.start-e.start,d.start-e.start+i.length+7],r,s)}r=this.insertCode(f,I?p:p+1,r,s);let A="";h?A=`
${m}.${this.UPDATE_LISTENER_FUNC_NAME} = (Comp) =>{
  const newElem=Comp(${this.PARAM_ALTER_NAME});
  ${m}.before(newElem);
  ${m}.remove();
  return newElem
}
`:A=`
${m}.${this.UPDATE_LISTENER_FUNC_NAME} = (Comp) =>{
  const newElem=Comp();
  ${m}.before(newElem);
  ${m}.remove();
  return newElem
}
`;let P=!1;for(let i in $){P||(P=!0);let l=$[i];A+=`import.meta.hot.accept('${i}',({${l.varMapCode}})=>{${l.listenCode}});`}return P&&(A=`
if(import.meta.hot){
  ${A}
}else{
  console.warn('import.meta.hot not exist')
}
`),r=this.insertCode(A,X,r,s),r}resolveFilePath(t,e){let r=_.resolve(e,"../",t);try{let n=T.statSync(r);if(n.isDirectory()){let s=T.readdirSync(r);for(let o=s.length;o--;){let a=s[o];if(/index\.[jt]sx$/.test(a))return t+"/"+a}}else return n.isFile()?t:!1}catch{let s=T.readdirSync(_.resolve(r,"../")),o=_.basename(t),a=_.dirname(t);for(let p=s.length;p--;){let u=s[p];if(s.indexOf(o)===0&&/\.[jt]sx$/.test(u))return a+"/"+u}}return!1}getImports(t,e){let r={varNames:[],info:{}};return t.forEach(n=>{if(n.type!=="ImportDeclaration"||n.source.value.indexOf(".")!==0)return 0;let s=this.resolveFilePath(n.source.value,e);if(!s)return 0;let o={src:s,imports:{}};r.info[n.source.value]=o,n.specifiers.forEach(a=>{let p=a.local.name;a.type==="ImportDefaultSpecifier"?o.imports[p]="default":a.type==="ImportSpecifier"&&(o.imports[p]=a.imported.name),r.varNames.push({name:p,info:o})})}),r}getExports(t){return t.filter(e=>e.type==="ExportDefaultDeclaration"||e.type==="ExportNamedDeclaration")}getExportedFunctions(t){let e=[],r=n=>{n.type==="FunctionDeclaration"||n.type==="ArrowFunctionExpression"?e.push(n):n.type==="VariableDeclaration"&&n.declarations.forEach(s=>r(s.init))};return t.forEach(n=>{if(n.type==="ExportDefaultDeclaration"||n.type==="ExportNamedDeclaration"){let{declaration:s}=n;s&&r(s)}}),e}getDependentJSXComponents(t,e){let r=[];return[...t.matchAll(/Blue\.r\(([A-Z][A-z_]*)/g)].forEach(n=>{let s=n[1],o=this.Parser.parseExpressionAt(t,n.index,{ecmaVersion:"latest",sourceType:"module"});o.type==="SequenceExpression"&&(o=o.expressions.find(a=>a.start===o.start)),e.varNames.forEach(a=>{if(a.name===s){let p={name:s,info:a.info,node:o,index:n.index};r.push(p)}})}),r}getVars(t,e){return[]}fromDirectReturnToVarReturn(t){return""}getReturnValue(t){return""}};var O=new S;function q({enabled:F}={enabled:!0}){return{name:"vite-plugin-blue-hmr",apply(t,{command:e}){return F&&e==="serve"},transform(t,e){if(/\.[jt]sx$/.test(e))return O.transform(t,e)}}}export{q as default,O as hmrAdder};
